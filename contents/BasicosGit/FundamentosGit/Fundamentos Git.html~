<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>Fundamentos de Git</title>
		<link rel="shortcut icon" type="image/x-icon" href="../../../../../KonoMngr/style/icons/konoicn.png">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<link rel="stylesheet" type="text/css" href="../../../../../KonoMngr/style/konoguides.css" />
		<script src="../../../../../KonoMngr/MathJax/MathJax.js?config=TeX-AMS-MML_HTMLorMML" type="text/javascript"></script>
		<script type="text/x-mathjax-config">
			MathJax.Hub.Config({
  				TeX: { equationNumbers: { autoNumber: "AMS" } }
			});</script>
		<link rel="stylesheet" href="../../../../../KonoMngr/highlight/styles/googlecode.css">
		<script src="../../../../../KonoMngr/highlight/highlight.pack.js" type="text/javascript"></script>
		<script>hljs.initHighlightingOnLoad();</script>		
	</head>
	
	<body class="kg-content">
		<header>
			<h1>Fundamentos de Git</h1>
		</header>
		
		<article class="subsection">
			<h1>Instantáneas, no diferencias</h1>
			<p>La <em>principal diferencia</em> entre Git y cualquier otro VCS (Subversion y compañía incluidos) es <em>cómo</em> Git <em>modela sus datos</em>.</p>
			<ul>
				<li>La mayoría de los <em>demás sistemas</em> almacenan la información como una <em>lista de cambios</em> en los archivos.</li>
				<li>modelan la información que almacenan como un conjunto de archivos y las modificaciones hechas sobre cada uno de ellos a lo largo del tiempo, como ilustra en la siguiente figure</li>
				<figure>
					<img src="media/OtrosSistemas.png" alt="alt-text" width="px" height="px">
					<figcaption>Otros sistemas tienden a almacenar los datos como cambios de cada archivo respecto a una versión base.</figcaption>
				</figure>
				<li><em>Git modela</em> sus datos más como un <em>conjunto de instantáneas</em> de un mini sistema de archivos.</li>
				<li>Cada vez que <em>confirmas un cambio</em>, o guardas el estado de tu proyecto en Git, él básicamente hace una <em>foto</em> del aspecto de todos tus archivos en ese momento, y guarda una <em>referencia a esa instantánea</em>.</li>
				<li>Para ser eficiente, si los archivos <em>no se han modificado</em>, Git <em>no almacena el archivo de nuevo</em>, sólo un enlace al archivo anterior idéntico que ya tiene almacenado.</li>
				<figure>
					<img src="media/GitModelo.png" alt="alt-text" width="px" height="px">
					<figcaption> Git almacena la información como instantáneas del proyecto a lo largo del tiempo.</figcaption>
				</figure>
				<li>Esto hace que Git se parezca más a un <em>mini sistema de archivos</em> con algunas herramientas tremendamente potentes construidas sobre él, que a un VCS.</li>
			</ul>
			
			<h2 id="">puntos a destacar</h2>
			<p>Algunos de los puntos a destacar de Git con respecto al resto de VCSs son:</p>
			<ul>
				<li><b>Casi cualquier operación es local</b>. La mayoría de las operaciones en Git sólo necesitan archivos y recursos locales para operar. Por lo general no se necesita información de ningún otro ordenador de tu red.</li>
				<li><b>Git tiene integridad</b>. Todo en Git es verificado mediante una <em>suma de comprobación (checksum)</em> antes de ser almacenado, y es identificado a partir de ese momento mediante dicha suma. Esto significa que es imposible cambiar los contenidos de cualquier archivo o directorio sin que Git lo sepa. No puedes perder información durante su transmisión o sufrir corrupción de archivos sin que Git lo detecte.</li>
				<li><b>Git generalmente sólo añade información</b>. Cuando realizas acciones en Git, casi todas ellas sólo añaden información a la base de datos de Git. Es muy difícil conseguir que el sistema haga algo que no se pueda deshacer, o que de algún modo borre información. Después de confirmar una instantánea en Git, es muy difícil de perder, especialmente si <em>envías (push)</em> tu base de datos a otro repositorio con regularidad.</li>
			</ul>
		</article>
		
		<article class="subsection">
			<h1>Los tres estados</h1>
			<p>Git tiene tres estados principales en los que se pueden encontrar tus archivos: confirmado <em>(committed)</em>, modificado <em>(modified)</em>, y preparado <em>(staged)</em>. </p>
			<ul>
				<li><b>Modificado (modified)</b> significa que has modificado el archivo pero todavía no lo has confirmado a tu base de datos.</li>
				<li><b>Preparado (staged)</b> significa que has marcado un archivo modificado en su versión actual para que vaya en tu próxima confirmación.</li>
				<li><b>Confirmado (committed)</b> significa que los datos están almacenados de manera segura en tu base de datos local. </li>
			</ul>
			<p>Esto nos lleva a las <em>tres secciones principales de un proyecto</em> de Git: el directorio de Git (Git directory), el directorio de trabajo (working directory), y el área de preparación (staging area).</p>
			<figure>
				<img src="media/SeccionesPrincipales.png" alt="alt-text" width="px" height="px">
				<figcaption>Directorio de trabajo, área de preparación y directorio de Git.</figcaption>
			</figure>
			
			<ul>
				<li>El <b>directorio de Git</b> es donde Git almacena los <em>metadatos</em> y la <em>base de datos</em> de objetos para tu proyecto. Es la parte más importante de Git, y es lo que se copia cuando clonas un repositorio desde otro ordenador.</li>
				<li>El <b>directorio de trabajo</b> es una <em>copia de una versión</em> del proyecto. Estos archivos se sacan de la base de datos <em>comprimida</em> en el directorio de Git, y se colocan en disco para que los puedas usar o modificar.</li>
				<li>El <b>área de preparación</b> es un sencillo <em>archivo</em>, generalmente contenido en tu directorio de Git, que almacena información acerca de <em>lo que va a ir en tu próxima confirmación</em>. A veces se le denomina <em>índice</em>, pero se está convirtiendo en estándar el referirse a ella como el área de preparación.</li>		
			</ul>
		</article>
		
		<article class="subsection">
			<h1>Flujo de trabajo básico</h1>
			<p>El flujo de trabajo básico en Git es algo así:</p>
			<ol>
				<li><em>Modificas</em> una serie de archivos en tu directorio de trabajo.</li>
				<li><em>Preparas</em> los archivos, añadiendolos a tu área de preparación.</li>
				<li><em>Confirmas</em> los cambios, lo que toma los archivos tal y como están en el área de preparación, y almacena esas instantáneas de manera permanente en tu directorio de Git.</li>
			</ol>
			<p>Si una versión concreta de un archivo está en el directorio de Git, se considera confirmada (committed). Si ha sufrido cambios desde que se obtuvo del repositorio, pero ha sido añadida al área de preparación, está preparada (staged). Y si ha sufrido cambios desde que se obtuvo del repositorio, pero no se ha preparado, está modificada (modified).</p>
		</article>	
		
	</body>
</html>	
